name: PR Build

on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Requirements
      run: pip install -r requirements.txt
      
    - name: Build patch
      run: ./build.py
      
    - name: Upload IPS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ff4-ips-pr-${{ github.event.number }}
        path: build/ff4.ips
        retention-days: 30
        
    - name: Update PR comment with download link
      uses: actions/github-script@v7
      with:
        script: |
          const artifactName = `ff4-ips-pr-${{ github.event.number }}`;
          const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
          const commentIdentifier = '<!-- FF4-IPS-BUILD-COMMENT -->';
          
          const body = `${commentIdentifier}
          ðŸŽ® **FF4 IPS Build Ready!**

          Your patch has been built successfully! Download the IPS file from the artifacts:

          ðŸ“¦ **Artifact:** \`${artifactName}\`  
          ðŸ”— **Download:** [Click here to go to the build page](${runUrl})

          The artifact will be available for 30 days.
          *Last updated: ${{ github.sha }}*`;

          // Find existing comment
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const existingComment = comments.data.find(comment => 
            comment.body.includes(commentIdentifier)
          );

          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }