; ******************
; ** Declarations **
; ******************
    vram_tile_set_pointer = 0x6800
    vram_tile_map_pointer = 0x2840
    newline_offset = 4

    ; those vars are pretty dangerous !!
;	CNTR = 0x15
;	CURRENT_C = 0x30
;	pixel_c = 0x20
;	BITSLEFT = 0x04
;	TILEPOS = 0x06
;	CNTR2 = 0x08
;	temp = 0x0A
;;vramcpy call;
;	scroll = 0x10
;	vsize = 0x12
;;buildmap call
;	winstate = 0x17
;	tstart = 0x18
;	nchars = 0x19

;	oldtilepos = 0xF6
    WRAM = 0x7E421B
; super fx ram i guess :)
	ram_mirror = WRAM + 0x1000

;	WRAM = 0x421B
;	WRAM2 = 0x423B
	WRAMPTR = 0x2108

;** routine principale
vwfstart:

	SEP #0x20
	REP #0x10

	LDA.B #0x01
	STA.W 0x420D


    var_base = 0x00
    CNTR        = var_base
    CURRENT_C   = var_base + 2
    BITSLEFT    = var_base + 4
    CNTR2       = var_base + 6
    temp        = var_base + 8
    scroll      = var_base + 10
	vsize       = var_base + 12
;;buildmap call
    winstate    = var_base + 14
	tstart      = var_base + 16
	nchars      = var_base + 18
	pixel_c     = var_base + 20
	oldtilepos  = var_base + 22
	TILEPOS     = var_base + 24


    php
    sep #0x20
    save_16_bit_var(CNTR, ram_mirror)
    save_16_bit_var(CURRENT_C, ram_mirror)
    save_16_bit_var(BITSLEFT, ram_mirror)
    save_16_bit_var(CNTR2, ram_mirror)
    save_16_bit_var(temp, ram_mirror)
    save_16_bit_var(scroll, ram_mirror)
    save_16_bit_var(vsize, ram_mirror)
    save_16_bit_var(winstate, ram_mirror)
    save_16_bit_var(tstart, ram_mirror)
    save_16_bit_var(nchars, ram_mirror)
    save_16_bit_var(pixel_c, ram_mirror)
    save_16_bit_var(oldtilepos, ram_mirror)
    save_16_bit_var(TILEPOS, ram_mirror)
    plp

	
	LDA.B #0x01
	STA.B winstate

	LDA.B #0x08
	STA.B BITSLEFT

	JSR.W clr		; on efface un peu de Wram


	jsr.w wait_for_vblank
	dma_transfer_to_vram_call(WRAM,vram_tile_set_pointer,0x0690,0x1801)
	jsr.w wait_for_vblank
	dma_transfer_to_vram_call(WRAM,vram_tile_set_pointer+0x348,0x0690,0x1801)
	jsr.w wait_for_vblank

    ; copy the old font tileset
    ; should we really mess with that ?
    ; it was used when we wanted to have the 8x8 and the vwf in the same dialog
    ; it seems deprecated
	dma_transfer_to_vram_call(0x0AF000,0x6000, 0x1000, 0x1801)

    ; Sets the BG3 vram pointer to 0x6000
    LDA #0x06
	STA 0x210C

	JSR.W ChargeLettre
	BRA firstrun
	
main:	
	JSR.W ChargeLettreInc
	
firstrun:
	JMP.W parse
	BRA main
fin:
;    php
;    sep #0x20
;    restore_16_bits_var(CNTR, ram_mirror)
;    restore_16_bits_var(CURRENT_C, ram_mirror)
;    restore_16_bits_var(BITSLEFT, ram_mirror)
;    restore_16_bits_var(CNTR2, ram_mirror)
;    restore_16_bits_var(temp, ram_mirror)
;    restore_16_bits_var(scroll, ram_mirror)
;    restore_16_bits_var(vsize, ram_mirror)
;    restore_16_bits_var(winstate, ram_mirror)
;    restore_16_bits_var(tstart, ram_mirror)
;    restore_16_bits_var(nchars, ram_mirror)
;    restore_16_bits_var(pixel_c, ram_mirror)
;    restore_16_bits_var(oldtilepos, ram_mirror)
;    restore_16_bits_var(TILEPOS, ram_mirror)
;    plp

	LDA.B #0x01
	STA.B 0xED
	STA.B 0xDE

	RTL

;******************
;** Parsing code **
;******************

parse:

	; Message Break
	CMP #0x00
	BNE _nxt1
	JMP.W fin
	
_nxt1:
	CMP #0x01
	BNE _nxt2
	JMP.W newline
	
_nxt2:	
	CMP #0x02
	BNE _nxt3
	JMP.W space
	
_nxt3:
	;Changement de Musique
	CMP #0x03
	BNE _nxt4
	JMP.W musique
	
_nxt4:
	; Nom des personages
	CMP #0x04
	BNE _nxt5
	JMP.W printname
_nxt5:

	; Delay avant de fermer ?
	CMP #0x05
	BNE _nxt6
		JMP.W _code05
_nxt6:
	; it might lack 06 and 07 text opcodes

	cmp #0x06
	bne _nxt7

	_nxt7:
	cmp #0x07
	bne _nxt8
    jmp.w _code07

	_nxt8:
	CMP #0x08
	BNE _nxt9
	JMP.W _code08
	
_nxt9:
	CMP #0xFB
	BNE _nxtFB
	STZ.B winstate
	jmp.w main
_nxtFB:
	CMP #0xFC
	BNE _nxtFC
	JMP.W suit3
	
_nxtFC:	
	CMP #0xFF
	BNE _nxtFF
	JMP.W retour_auto
	
_nxtFF:

	; on fabrique le pointeur de font et le pointeur vers la wram
	;retour auto a ajouter ici
	
return_a:
	JSR.W makeptr
	JSR.W ShiftNew
	JSR.W wdisplay

	JMP.W main
	
	
;***********
;** Space **
;***********
space:
	JSR.W ChargeLettreInc
	CLC
	ADC.B TILEPOS
	JMP.W main

;******************
;Cout en gils
;******************

_code08:
	LDA.W 0x08F8
	STA.B 0x30
	LDA.W 0x08F9
	STA.B 0x31
	LDA.W 0x08FA
	STA.B 0x32
	JSR.L 0x15C324

	LDX.W #0x0000

_loop_B5C3:
	LDA.B 0x36,X
	CMP #0x80
	BNE _loop_B5D2
	INX
	CPX.W #0x0005
	BEQ _loop_B5D2
	JMP.W _loop_B5C3

_loop_B5D2:
	LDA.B 0x36,X
		; Old code
		;00B5D4 STA 0x0774,Y
		;00B5D7 LDA #0xFF
		;00B5D9 STA 0x0834,Y
		;00B5DC INY
	PHX
	PHY

	STA.B CURRENT_C			;appel de la vwf

	JSR.W makeptr
	JSR.W ShiftNew
	JSR.W wdisplay

	PLY
	PLX

	INX
	CPX.W #0x0006
	BNE _loop_B5D2

	JMP.W main

;================================
;Nouveau Cadre
;================================

nouveau_cadre:
		
    dma_transfer_to_vram_call(winmap, vram_tile_map_pointer, 0x2C0, 0x1801)


	LDA.B #0x00
	STA.B TILEPOS
	JSR.W incpointer
	LDA.B #0x01
	STA.B 0xED
	RTL


;****************
;** printfname **
;****************
printname:
{
	JSR.W ChargeLettreInc
	ASL
	STA.B 0x30
	ASL
	CLC
	ADC 0x30
	STA.B 0x30
	STZ.B 0x31
	LDX.B 0x30

	LDY.W #0x0000
	
next:
	LDX.B 0x30
	LDA 0x1500,X
	STA.B CURRENT_C
	CMP #0xFF
	BEQ exit
	INX
	PHX
	PHY
	JSR.W makeptr
	JSR.W ShiftNew
	JSR.W wdisplay
	PLY
	PLX

suite:
	INC.B 0x30

	INY
	CPY.W #0x0006
	BEQ exit
	JMP.W next
exit:
	JMP.W main
}
;********************
;** Nouvelle ligne **
;********************
newline:
	STZ.B pixel_c
	STZ.B pixel_c+1

	REP #0x20
	LDA.W #newline_offset
	SEP #0x20

	STA.B BITSLEFT

	LDA.B TILEPOS
	CLC
	;Second line
	CMP #0x1A+1
	BCS suit
	
	LDA.B #0x1A
	STA.B TILEPOS
	BRA end
suit:

	;Third Line
	CMP #0x34+1
	BCS suit2
	LDA.B #0x34
	STA.B TILEPOS
	BRA end
suit2:
	
	;Forth Line
	CMP #0x4E+1
	BCS suit3

	LDA.B #0x4E
	STA.B TILEPOS
	BRA end

suit3:	

	STZ.B CURRENT_C
	STZ.B TILEPOS
	STZ.B CNTR2
	STZ.B temp
	STZ.B pixel_c
	STZ.B pixel_c+1

	LDA.B #0x08
	STA.B BITSLEFT

	JSR.W clr
	JSR.W waitpad
	JSR.W wdisplay
end:

	JMP.W main

;*************
;** Musique **
;*************

musique:
	JSR.W ChargeLettreInc
	STA 0x1E01
	LDA.B #0x01
	STA 0x1E00

	JSR.L 0x048004
	JMP.W main

_code05:
	JSR.W ChargeLettreInc
	STZ 0x19
	ASL
	ROL 0x19
	ASL
	ROL 0x19
	ASL
	ROL 0x19
	STA 0x18
	LDX 0x18
	STX 0x08F4
	LDX 0x0000
	STX 0x08F6
	JMP.W main


.macro vwf_putchar() {
    phx
	phy

	sta.b CURRENT_C

	jsr.w makeptr
	jsr.w ShiftNew
	jsr.w wdisplay

	ply
	plx
}

; display item or magic
_code07:
{
    lda 0x08FB

    rep #0x20
    and.w #0x00FF
    sta.b temp
    asl
    asl
    asl
    adc.b temp
    tax
    sep #0x20

    ; skip first char (usually a space or a symbol.)
    inx
    lda #0x09

loop:
    pha
    lda 0x0F8000, x
    cmp #0xFF
    beq cleanup
    vwf_putchar()

    inx

    pla
    dec
    bne loop
    bra end
cleanup:
    pla
end:
    lda #0x00
    jmp.w main
}

;*******************
;** Shift Routine **
;*******************

ShiftNew:
	REP #0x20
	LDA.W #0x0010
	STA.B CNTR
	SEP #0x20

	PHB
	LDA.B #0x7E
	PHA
	PLB

Boucle2:
	REP #0x20
	LDA.W #0x0000
	STZ.B CNTR2
	SEP #0x20
	PHX
	LDA.B BITSLEFT
	
	CMP #0x08
	BNE _shift
	PLX
	LDA.L assets_font_dat,X
	INX
	XBA
	BRA _store
		
_shift:
	TAX			; using math multiplication
	LDA.L vwf_shift_table,X
	STA.L 0x004202		; MULTPILIER

		
	PLX
		
	;REP #0x20
		
	LDA.L assets_font_dat,X
	INX

	STA.L 0x004203		; MULTIPLICAND
	
	REP #0x20
	NOP
	NOP
	NOP
	NOP
	LDA.L 0x004216	; the result is stored in 0x4216-0x4217
	SEP #0x20

_store:
	INY
	XBA
	PHX
	TYX
	ORA.L WRAM,x
	STA.L WRAM,x
	XBA
	STA.L WRAM+0x20,x
    TXY
    PLX
	INY
				
	DEC.B CNTR
	BNE Boucle2
		
	PLB
	PHA
	PLA

	REP #0x20
	STZ.B temp
	LDA.W #0x0000
	LDX.W #0x0000
	SEP #0x20

	LDA.B CURRENT_C
	TAX

	LDA.L assets_font_length_table_dat,X
	STA.B temp
		
	REP #0x20
	CLC
	
	ADC.B pixel_c
	INC
	CLC
	STA.B pixel_c
	LDA.W #0x0000
	SEP #0x20

	LDA.B BITSLEFT

	CLC
	SBC.B temp

loopdec:
	CMP #0x00
	BMI coupe
	BEQ coupe
		
	STA.B BITSLEFT
	RTS

coupe:
	CLC
	ADC #0x08
	INC.B TILEPOS
	BRA loopdec


vwf_shift_table:
.db 0b00000000				; dummy entrie =0
.db 0b00000010				;1
.db 0b00000100				;2
.db 0b00001000				;3
.db 0b00010000				;4
.db 0b00100000				;5
.db 0b01000000				;6
.db 0b10000000				;7
.db 0b10000000				;8

;************************
;** build font pointer **
;************************

makeptr:
	PHA	
	
	LDX.W #0x0000
	LDY.W #0x0000
	LDA.B CURRENT_C
	XBA
	LDA #0x00
	XBA
	REP #0x20
	ASL
	ASL
	ASL
	ASL
	TAX
	LDA.W #0x0000
	SEP #0x20

	LDA.B TILEPOS
	sta.b oldtilepos
	REP #0x20
	ASL
	ASL
	ASL
	ASL
	ASL
	sta.b oldtilepos
	TAY
	SEP #0x20
	PLA
	RTS



;===================================
;Clear Wram
;
;===================================
clr:
	PHB			;efface la la ram pour y stocker l'image
	LDA.B #WRAM >> 16
	PHA
	PLB
	LDX.W #0x0000
lop:
	LDA.B #0xFF
	STA.W WRAM,X
	INX

	LDA.B #0x00
	STA.W WRAM,X
	INX

	CPX.W #0x0D10
		
	BNE lop
	
lop2:
		
	LDA.B #0x00
	STA.W WRAM,X
		
	INX
		
	CPX.W #0x0D20
	BNE lop2

	PLB
	PHA
	PLA

	RTS

;*****************
;** Retour auto **
;*****************
;on cherche l'espace suivant
retour_auto:

	PHX
	LDX.W #0x0000
	LDY.W 0x0772	;on sauve la position de lecture dans Y
	STZ.B temp
	STZ.B temp+1
	LDA.B 0x3F
	;LDA.B CURRENT_C
	PHA
	BRA firstrun2
loopchr:
	JSR.W ChargeLettreInc
	
;règles de césure
	BEQ chrfound	;Message Break \n<end>\n\n
	CMP #0xFF	;espace
	BEQ chrfound
	CMP #0xFC	;<new>
	BEQ chrfound
	CMP #0x01	;\n
	BEQ chrfound

	firstrun2:
	;REP #0x20
	TAX
	;SEP #0x20

	LDA.L assets_font_length_table_dat,X ; on load la largeur de la lettre
	INC

	REP #0x20
	CLC
	ADC.B temp
	STA.B temp
	SEP #0x20
	
	;else
	BRA loopchr

	chrfound:

	REP #0x20
	LDA.W #0x0000
	LDA.B pixel_c
	CLC
	ADC.B temp

	CMP.W #0x00CD-newline_offset	;largeur max en pixel
	BMI noreturn
retour:
	SEP #0x20
	PLA
	STA.B 0x3F
	STY.W 0x0772	; restoration de la position du texte
	PLX
	JMP.W newline
	
	noreturn:
	;LDA.W #0x0000
	SEP #0x20
	PLA
	STA.B 0x3F
	STY.W 0x0772	; restauration de la position du texte
	JSR.W ChargeLettre ; ça evite a certains caractères de passer à la trappe
	PLX
	JMP.W return_a


;Wait for vblank routine


;Wait for joypad 1
waitpad:
{
	PHA
	LDA.B winstate
	BEQ nowaitpad
	
padloop:
	LDA.W 0x4218
	BEQ padloop
	BRA end
	
nowaitpad:
;	LDA.B #0x10
;	STA.B CNTR
;
;{
;loop:
;	WAI
;	WAI
;	WAI
;	WAI
;	DEC.B CNTR
;	BNE loop
;}
end:
	PLA
	jsr.w clr
	jsr.w wait_for_vblank
	dma_transfer_to_vram_call(WRAM,vram_tile_set_pointer,0x0690,0x1801)
	jsr.w wait_for_vblank
	dma_transfer_to_vram_call(WRAM + 0x348,vram_tile_set_pointer + 0x348,0x0690,0x1801)
	RTS
}

wdisplay:


;wait for vblank to transfer

	jsr.w wait_for_vblank

;	php 
	sep #0x20


	;macro expansion
	
	PHP
	PHA
	PHX

	LDA.B #0x80
	STA.W 0x2115

	rep #0x20
	pha

	lda.b oldtilepos
	lsr			; addresse vram /2
	clc
	adc.w #vram_tile_set_pointer
	sta.w 0x2116

	
	lda.b oldtilepos
	clc
	adc.w #WRAM & 0xFFFF
	sta.w 0x4372
	
	pla
	sep #0x20
	
	channel=7
	
	LDX.W #0x1801
	STX.W 0x4370
	LDA.B #0xFF & (WRAM >> 16)
	STA.W 0x4374

	LDX.W #0x0040
	STX.W 0x4375
	LDA.B #0x01<<7
	STA 0x420B

	NOP
	NOP
	
	PLX
	PLA
	PLP
	

;; transfer

	LDA.B #(0x0A<<2)+1		;déplacement du tileset
	STA.W 0x2109		;vers 0x2800 ?

	STZ.W 0x2111		;horizontal scrool BG3
	STZ.W 0x2111

	STZ.W 0x2112		;vertical scrool BG3
	STZ.W 0x2112
	
	LDA.B winstate
	BEQ nowindow
	
	dma_transfer_to_vram_call(winmap, vram_tile_map_pointer, 0x2C0, 0x1801)
	BRA window
	
nowindow:
    dma_transfer_to_vram_call(intromap, vram_tile_map_pointer, 0x0280, 0x1801)

	window:
;	LDA.B #0x0F		;screen:ON luminosité au max
;	STA.W 0x2100
{
    LDA.B CURRENT_C
    CMP #0xFF
    BEQ no_char_wait
	WAI			;wait for interrupts
	no_char_wait:
}
	RTS

wclear:
    ; restore tileset position
    LDA #0x02
	STA 0x210C
    dma_transfer_to_vram_call(clearmap, vram_tile_map_pointer, endclearmap-clearmap, 0x1801)
	RTL

winmap:
.dw 0x2000,0x2000,0x2016,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2017,0x2018,0x2000,0x2000
.dw 0x2000,0x2000,0x2019,0x2100,0x2102,0x2104,0x2106,0x2108,0x210A,0x210C,0x210E,0x2110,0x2112,0x2114,0x2116,0x2118,0x211A,0x211C,0x211E,0x2120,0x2122,0x2124,0x2126,0x2128,0x212A,0x212C,0x212E,0x2130,0x2132,0x201A,0x2000,0x2000
.dw 0x2000,0x2000,0x2019,0x2101,0x2103,0x2105,0x2107,0x2109,0x210B,0x210D,0x210F,0x2111,0x2113,0x2115,0x2117,0x2119,0x211B,0x211D,0x211F,0x2121,0x2123,0x2125,0x2127,0x2129,0x212B,0x212D,0x212F,0x2131,0x2133,0x201A,0x2000,0x2000
.dw 0x2000,0x2000,0x2019,0x2134,0x2136,0x2138,0x213A,0x213C,0x213E,0x2140,0x2142,0x2144,0x2146,0x2148,0x214A,0x214C,0x214E,0x2150,0x2152,0x2154,0x2156,0x2158,0x215A,0x215C,0x215E,0x2160,0x2162,0x2164,0x2166,0x201A,0x2000,0x2000
.dw 0x2000,0x2000,0x2019,0x2135,0x2137,0x2139,0x213B,0x213D,0x213F,0x2141,0x2143,0x2145,0x2147,0x2149,0x214B,0x214D,0x214F,0x2151,0x2153,0x2155,0x2157,0x2159,0x215B,0x215D,0x215F,0x2161,0x2163,0x2165,0x2167,0x201A,0x2000,0x2000
.dw 0x2000,0x2000,0x2019,0x2168,0x216A,0x216C,0x216E,0x2170,0x2172,0x2174,0x2176,0x2178,0x217A,0x217C,0x217E,0x2180,0x2182,0x2184,0x2186,0x2188,0x218A,0x218C,0x218E,0x2190,0x2192,0x2194,0x2196,0x2198,0x219A,0x201A,0x2000,0x2000
.dw 0x2000,0x2000,0x2019,0x2169,0x216B,0x216D,0x216F,0x2171,0x2173,0x2175,0x2177,0x2179,0x217B,0x217D,0x217F,0x2181,0x2183,0x2185,0x2187,0x2189,0x218B,0x218D,0x218F,0x2191,0x2193,0x2195,0x2197,0x2199,0x219B,0x201A,0x2000,0x2000
.dw 0x2000,0x2000,0x2019,0x219C,0x219E,0x21A0,0x21A2,0x21A4,0x21A6,0x21A8,0x21AA,0x21AC,0x21AE,0x21B0,0x21B2,0x21B4,0x21B6,0x21B8,0x21BA,0x21BC,0x21BE,0x21C0,0x21C2,0x21C4,0x21C6,0x21C8,0x21CA,0x21CC,0x21CE,0x201A,0x2000,0x2000
.dw 0x2000,0x2000,0x2019,0x219D,0x219F,0x21A1,0x21A3,0x21A5,0x21A7,0x21A9,0x21AB,0x21AD,0x21AF,0x21B1,0x21B3,0x21B5,0x21B7,0x21B9,0x21BB,0x21BD,0x21BF,0x21C1,0x21C3,0x21C5,0x21C7,0x21C9,0x21CB,0x21CD,0x21CF,0x201A,0x2000,0x2000
tail:
.dw 0x2000,0x2000,0x201B,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201C,0x201D,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000

endmap:

intromap:

.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2100,0x2102,0x2104,0x2106,0x2108,0x210A,0x210C,0x210E,0x2110,0x2112,0x2114,0x2116,0x2118,0x211A,0x211C,0x211E,0x2120,0x2122,0x2124,0x2126,0x2128,0x212A,0x212C,0x212E,0x2130,0x2132,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2101,0x2103,0x2105,0x2107,0x2109,0x210B,0x210D,0x210F,0x2111,0x2113,0x2115,0x2117,0x2119,0x211B,0x211D,0x211F,0x2121,0x2123,0x2125,0x2127,0x2129,0x212B,0x212D,0x212F,0x2131,0x2133,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2134,0x2136,0x2138,0x213A,0x213C,0x213E,0x2140,0x2142,0x2144,0x2146,0x2148,0x214A,0x214C,0x214E,0x2150,0x2152,0x2154,0x2156,0x2158,0x215A,0x215C,0x215E,0x2160,0x2162,0x2164,0x2166,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2135,0x2137,0x2139,0x213B,0x213D,0x213F,0x2141,0x2143,0x2145,0x2147,0x2149,0x214B,0x214D,0x214F,0x2151,0x2153,0x2155,0x2157,0x2159,0x215B,0x215D,0x215F,0x2161,0x2163,0x2165,0x2167,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2168,0x216A,0x216C,0x216E,0x2170,0x2172,0x2174,0x2176,0x2178,0x217A,0x217C,0x217E,0x2180,0x2182,0x2184,0x2186,0x2188,0x218A,0x218C,0x218E,0x2190,0x2192,0x2194,0x2196,0x2198,0x219A,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2169,0x216B,0x216D,0x216F,0x2171,0x2173,0x2175,0x2177,0x2179,0x217B,0x217D,0x217F,0x2181,0x2183,0x2185,0x2187,0x2189,0x218B,0x218D,0x218F,0x2191,0x2193,0x2195,0x2197,0x2199,0x219B,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x219C,0x219E,0x21A0,0x21A2,0x21A4,0x21A6,0x21A8,0x21AA,0x21AC,0x21AE,0x21B0,0x21B2,0x21B4,0x21B6,0x21B8,0x21BA,0x21BC,0x21BE,0x21C0,0x21C2,0x21C4,0x21C6,0x21C8,0x21CA,0x21CD,0x21CF,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x219D,0x219F,0x21A1,0x21A3,0x21A5,0x21A7,0x21A9,0x21AB,0x21AD,0x21AF,0x21B1,0x21B3,0x21B5,0x21B7,0x21B9,0x21BB,0x21BD,0x21BF,0x21C1,0x21C3,0x21C5,0x21C7,0x21C9,0x21CB,0x21CE,0x21D0,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000

; cela manque certes d'optimisation je ferai une routine pour effacer de la map
clearmap:
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
;un poil plus long pour effacer la fenètre gils dans la foulée
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000
.dw 0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000

endclearmap:






